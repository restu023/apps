# -*- coding: utf-8 -*-
"""apps3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r1OShnyYako0NI3dMQkzALt0jyfNgHLy
"""

import streamlit as st
import sqlite3

# Membuat database SQLite
conn = sqlite3.connect('customer_data.db')
c = conn.cursor()

# Membuat tabel pelanggan
c.execute('''
          CREATE TABLE IF NOT EXISTS customers (
              id INTEGER PRIMARY KEY,
              name TEXT NOT NULL,
              address TEXT NOT NULL,
              email TEXT NOT NULL,
              kk_number TEXT NOT NULL,
              electricity_date DATE NOT NULL
          )
          ''')
conn.commit()

# Fungsi tambah data pelanggan
def add_customer(name, address, email, kk_number, electricity_date):
    c.execute('INSERT INTO customers (name, address, email, kk_number, electricity_date) VALUES (?, ?, ?, ?, ?)', (name, address, email, kk_number, electricity_date))
    conn.commit()

# Fungsi tampilkan data pelanggan
def view_all_customers():
    c.execute('SELECT * FROM customers')
    data = c.fetchall()
    return data

# Fungsi untuk melakukan pencarian berdasarkan nama atau alamat
def search_customers(query):
    c.execute("SELECT * FROM customers WHERE name LIKE ? OR address LIKE ?", ('%'+query+'%', '%'+query+'%'))
    data = c.fetchall()
    return data

# Fungsi untuk melakukan filter berdasarkan tanggal pengisian listrik
def filter_customers_by_date(start_date, end_date):
    c.execute("SELECT * FROM customers WHERE electricity_date BETWEEN ? AND ?", (start_date, end_date))
    data = c.fetchall()
    return data

# Fungsi update data pelanggan
def update_customer(new_name, new_address, new_email, new_kk_number, new_electricity_date, id):
    c.execute('UPDATE customers SET name = ?, address = ?, email = ?, kk_number = ?, electricity_date = ? WHERE id = ?', (new_name, new_address, new_email, new_kk_number, new_electricity_date, id))
    conn.commit()

# Fungsi hapus data pelanggan
def delete_customer(id):
    c.execute('DELETE FROM customers WHERE id = ?', (id,))
    conn.commit()

# Streamlit app
def main():
    st.title("Aplikasi Penyimpanan Data Pelanggan Listrik")

    menu = ["Tambah Data Pelanggan", "Tampilkan Data Pelanggan", "Cari Data Pelanggan", "Filter Data Pelanggan", "Update Data Pelanggan", "Hapus Data Pelanggan"]
    choice = st.sidebar.selectbox("Pilih Menu", menu)

    if choice == "Tambah Data Pelanggan":
        st.subheader("Tambah Data Pelanggan")
        name = st.text_input("Masukkan Nama Pelanggan")
        address = st.text_input("Masukkan Alamat Pelanggan")
        email = st.text_input("Masukkan Email Pelanggan")
        kk_number = st.text_input("Masukkan Nomor Kartu Keluarga (KK)")
        electricity_date = st.date_input("Pilih Tanggal Pengisian Listrik")
        if st.button("Tambah"):
            add_customer(name, address, email, kk_number, electricity_date)
            st.success("Data Pelanggan Ditambahkan: {} - {} - {} - {} - {}".format(name, address, email, kk_number, electricity_date))

    elif choice == "Tampilkan Data Pelanggan":
        st.subheader("Data Pelanggan")
        customers = view_all_customers()
        for customer in customers:
            st.write("ID:", customer[0], " | Name:", customer[1], " | Address:", customer[2], " | Email:", customer[3], " | KK Number:", customer[4], " | Electricity Date:", customer[5])

    elif choice == "Cari Data Pelanggan":
        st.subheader("Cari Data Pelanggan")
        query = st.text_input("Masukkan Nama atau Alamat yang Dicari")
        if st.button("Cari"):
            search_result = search_customers(query)
            if search_result:
                for customer in search_result:
                    st.write("ID:", customer[0], " | Name:", customer[1], " | Address:", customer[2], " | Email:", customer[3], " | KK Number:", customer[4], " | Electricity Date:", customer[5])
            else:
                st.write("Data tidak ditemukan.")

    elif choice == "Filter Data Pelanggan":
        st.subheader("Filter Data Pelanggan")
        start_date = st.date_input("Pilih Tanggal Awal")
        end_date = st.date_input("Pilih Tanggal Akhir")
        if st.button("Filter"):
            filtered_result = filter_customers_by_date(start_date, end_date)
            if filtered_result:
                for customer in filtered_result:
                    st.write("ID:", customer[0], " | Name:", customer[1], " | Address:", customer[2], " | Email:", customer[3], " | KK Number:", customer[4], " | Electricity Date:", customer[5])
            else:
                st.write("Data tidak ditemukan.")

    elif choice == "Update Data Pelanggan":
        st.subheader("Update Data Pelanggan")
        customers = view_all_customers()
        for customer in customers:
            st.write("ID:", customer[0], " | Name:", customer[1], " | Address:", customer[2], " | Email:", customer[3], " | KK Number:", customer[4], " | Electricity Date:", customer[5])
        selected_id = st.number_input("Masukkan ID Pelanggan yang Ingin Diupdate")
        selected_name = st.text_input("Masukkan Nama Baru")
        selected_address = st.text_input("Masukkan Alamat Baru")
        selected_email = st.text_input("Masukkan Email Baru")
        selected_kk_number = st.text_input("Masukkan Nomor KK Baru")
        selected_electricity_date = st.date_input("Pilih Tanggal Pengisian Listrik Baru")
        if st.button("Update"):
            update_customer(selected_name, selected_address, selected_email, selected_kk_number, selected_electricity_date, selected_id)
            st.success("Data Pelanggan Diperbarui")

    elif choice == "Hapus Data Pelanggan":
        st.subheader("Hapus Data Pelanggan")
        customers = view_all_customers()
        for customer in customers:
            st.write("ID:", customer[0], " | Name:", customer[1], " | Address:", customer[2], " | Email:", customer[3], " | KK Number:", customer[4], " | Electricity Date:", customer[5])
        selected_id = st.number_input("Masukkan ID Pelanggan yang Ingin Dihapus")
        if st.button("Hapus"):
            delete_customer(selected_id)
            st.success("Data Pelanggan Dihapus")

if __name__ == '__main__':
    main()